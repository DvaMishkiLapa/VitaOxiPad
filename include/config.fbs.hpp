// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONFIG_H_
#define FLATBUFFERS_GENERATED_CONFIG_H_

#include "flatbuffers/flatbuffers.h"

struct ConfigPacket;
struct ConfigPacketBuilder;

enum class TouchConfig : uint8_t {
  Disabled = 0,
  Front = 1,
  Back = 2,
  FrontBack = 3,
  MIN = Disabled,
  MAX = FrontBack
};

inline const TouchConfig (&EnumValuesTouchConfig())[4] {
  static const TouchConfig values[] = {
    TouchConfig::Disabled,
    TouchConfig::Front,
    TouchConfig::Back,
    TouchConfig::FrontBack
  };
  return values;
}

inline const char * const *EnumNamesTouchConfig() {
  static const char * const names[5] = {
    "Disabled",
    "Front",
    "Back",
    "FrontBack",
    nullptr
  };
  return names;
}

inline const char *EnumNameTouchConfig(TouchConfig e) {
  if (flatbuffers::IsOutRange(e, TouchConfig::Disabled, TouchConfig::FrontBack)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTouchConfig()[index];
}

struct ConfigPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ConfigPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOUCH_CONFIG = 4,
    VT_MOTION_ACTIVATE = 6,
    VT_DISCONNECT = 8
  };
  TouchConfig touch_config() const {
    return static_cast<TouchConfig>(GetField<uint8_t>(VT_TOUCH_CONFIG, 0));
  }
  bool mutate_touch_config(TouchConfig _touch_config) {
    return SetField<uint8_t>(VT_TOUCH_CONFIG, static_cast<uint8_t>(_touch_config), 0);
  }
  bool motion_activate() const {
    return GetField<uint8_t>(VT_MOTION_ACTIVATE, 0) != 0;
  }
  bool mutate_motion_activate(bool _motion_activate) {
    return SetField<uint8_t>(VT_MOTION_ACTIVATE, static_cast<uint8_t>(_motion_activate), 0);
  }
  bool disconnect() const {
    return GetField<uint8_t>(VT_DISCONNECT, 0) != 0;
  }
  bool mutate_disconnect(bool _disconnect) {
    return SetField<uint8_t>(VT_DISCONNECT, static_cast<uint8_t>(_disconnect), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TOUCH_CONFIG) &&
           VerifyField<uint8_t>(verifier, VT_MOTION_ACTIVATE) &&
           VerifyField<uint8_t>(verifier, VT_DISCONNECT) &&
           verifier.EndTable();
  }
};

struct ConfigPacketBuilder {
  typedef ConfigPacket Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_touch_config(TouchConfig touch_config) {
    fbb_.AddElement<uint8_t>(ConfigPacket::VT_TOUCH_CONFIG, static_cast<uint8_t>(touch_config), 0);
  }
  void add_motion_activate(bool motion_activate) {
    fbb_.AddElement<uint8_t>(ConfigPacket::VT_MOTION_ACTIVATE, static_cast<uint8_t>(motion_activate), 0);
  }
  void add_disconnect(bool disconnect) {
    fbb_.AddElement<uint8_t>(ConfigPacket::VT_DISCONNECT, static_cast<uint8_t>(disconnect), 0);
  }
  explicit ConfigPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ConfigPacketBuilder &operator=(const ConfigPacketBuilder &);
  flatbuffers::Offset<ConfigPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ConfigPacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConfigPacket> CreateConfigPacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    TouchConfig touch_config = TouchConfig::Disabled,
    bool motion_activate = false,
    bool disconnect = false) {
  ConfigPacketBuilder builder_(_fbb);
  builder_.add_disconnect(disconnect);
  builder_.add_motion_activate(motion_activate);
  builder_.add_touch_config(touch_config);
  return builder_.Finish();
}

inline const ConfigPacket *GetConfigPacket(const void *buf) {
  return flatbuffers::GetRoot<ConfigPacket>(buf);
}

inline const ConfigPacket *GetSizePrefixedConfigPacket(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ConfigPacket>(buf);
}

inline ConfigPacket *GetMutableConfigPacket(void *buf) {
  return flatbuffers::GetMutableRoot<ConfigPacket>(buf);
}

inline bool VerifyConfigPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ConfigPacket>(nullptr);
}

inline bool VerifySizePrefixedConfigPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ConfigPacket>(nullptr);
}

inline void FinishConfigPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ConfigPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedConfigPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ConfigPacket> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_CONFIG_H_
